[{"C:\\Users\\Socratis\\Desktop\\camera-app\\src\\index.js":"1","C:\\Users\\Socratis\\Desktop\\camera-app\\src\\App.js":"2","C:\\Users\\Socratis\\Desktop\\camera-app\\src\\Navbar.js":"3","C:\\Users\\Socratis\\Desktop\\camera-app\\src\\Pages\\Settings.js":"4","C:\\Users\\Socratis\\Desktop\\camera-app\\src\\Pages\\Home.js":"5"},{"size":146,"mtime":1620842670318,"results":"6","hashOfConfig":"7"},{"size":483,"mtime":1627304174695,"results":"8","hashOfConfig":"7"},{"size":780,"mtime":1626866923374,"results":"9","hashOfConfig":"7"},{"size":7075,"mtime":1633342369278,"results":"10","hashOfConfig":"7"},{"size":1158,"mtime":1633344072354,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1wf7wcx",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Socratis\\Desktop\\camera-app\\src\\index.js",[],["24","25"],"C:\\Users\\Socratis\\Desktop\\camera-app\\src\\App.js",[],"C:\\Users\\Socratis\\Desktop\\camera-app\\src\\Navbar.js",[],"C:\\Users\\Socratis\\Desktop\\camera-app\\src\\Pages\\Settings.js",["26","27"],"import React, { Component,useState,useEffect} from \"react\";    \r\nimport './Settings.css' \r\nimport axios from \"axios\";\r\nimport ReactPlayer from 'react-player/lazy'\r\n\r\nconst baseURL = \"http://localhost:5000/get_config_file_data\";\r\nvar data_config \r\n\r\nexport function App() {\r\n  const [conf, setPost] = React.useState(null);\r\n\r\n  React.useEffect(() => {\r\n    axios.get(baseURL).then((response) => {\r\n      setPost(response.data);\r\n    });\r\n  }, []);\r\n\r\n  if (!conf) return null;\r\n  data_config = conf\r\n  return (conf);\r\n}\r\n\r\nexport function read_values() {\r\n    return App()\r\n}  \r\n\r\n\r\nfunction replacer(whole_str,str,value_to_change){\r\n    var config=''\r\n    var result =''\r\n    config = whole_str\r\n    if (config != null) {\r\n    var split = config.toString().split(\"\\n\");\r\n \r\n    var index, value;\r\n    for (index = 0; index < split.length; ++index) {\r\n        value = split[index];\r\n        if (value.substring(0, str.length) === str ) {\r\n           result = value;\r\n            break;\r\n        }\r\n    }\r\n    var final_value = result.toString().split('\"')[1]\r\n    whole_str = whole_str.split(final_value).join(value_to_change);\r\n    return(whole_str)\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction write_values(var1,val1,var2,val2,var3,val3,var4,val4,var5,val5) {\r\n    var mydata\r\n    mydata = data_config\r\n    mydata=replacer(mydata,var1,val1)\r\n    mydata=replacer(mydata,var2,val2)\r\n    mydata=replacer(mydata,var3,val3)\r\n    mydata=replacer(mydata,var4,val4)\r\n    mydata=replacer(mydata,var5,val5)\r\n    //console.log(mydata)\r\n    var to_change = {data: mydata};\r\n    axios.post('http://localhost:5000/change_config_file_data', to_change);\r\n}\r\n\r\n\r\n\r\nclass Settings extends Component {\r\n    constructor(props) {    \r\n        super(props);    \r\n        this.state = {    \r\n            deployment: '',    \r\n            nodeid: '',    \r\n            cameraid: '',    \r\n            gatewayid: '',    \r\n            interfaceid: '',   \r\n            formErrors: {}    \r\n        };    \r\n    \r\n        this.initialState = this.state;\r\n    } \r\n    handleFormValidation() {    \r\n        const { deployment, nodeid, cameraid, gatewayid, interfaceid } = this.state;    \r\n        let formErrors = {};    \r\n        let formIsValid = true;\r\n\r\n        if (!deployment) {    \r\n            formIsValid = false;    \r\n            formErrors[\"deploymentErr\"] = \"Mandatory Field\";    \r\n        }    \r\n\r\n        if (!nodeid) {    \r\n            formIsValid = false;    \r\n            formErrors[\"nodeidErr\"] = \"Mandatory Field\";   \r\n        }  \r\n\r\n        if (!cameraid) {    \r\n            formIsValid = false;    \r\n            formErrors[\"cameraidErr\"] = \"Mandatory Field\";    \r\n        }  \r\n\r\n        if (!gatewayid) {    \r\n            formIsValid = false;    \r\n            formErrors[\"gatewayidErr\"] = \"Mandatory Field\";    \r\n        }  \r\n\r\n        if (!interfaceid) {    \r\n            formIsValid = false;    \r\n            formErrors[\"interfaceidErr\"] = \"Mandatory Field\";    \r\n        } \r\n\r\n        this.setState({ formErrors: formErrors });    \r\n        return formIsValid; \r\n    }\r\n\r\n    handleChange = (e) => {    \r\n        const { name, value } = e.target;    \r\n        this.setState({ [name]: value });    \r\n    }  \r\n    \r\n    handleSubmit = (e) => {    \r\n        e.preventDefault(); \r\n        if (this.handleFormValidation()) {    \r\n\r\n            write_values(\"config.deployment.id\",this.state.deployment,\r\n            \"config.device.node\",this.state.nodeid,\r\n            \"config.device.type\",this.state.cameraid,\r\n            \"config.device.gateway\",this.state.gatewayid,\r\n            \"config.device.interface\",this.state.interfaceid)\r\n\r\n            alert('Data Successfully registered.')    \r\n            this.setState(this.initialState)    \r\n        }    \r\n    }  \r\n\r\n    render() {    \r\n        const { deploymentErr, nodeidErr, cameraidErr, gatewayidErr, interfaceidErr} = this.state.formErrors;\r\n        return (    \r\n        <div >   \r\n             <h1 style={{ textAlign: \"center\" }} >Change Settings </ h1>\r\n            \r\n            <ReactPlayer className=\"reactplayer\" url='https://www.youtube.com/watch?v=AohUh4Wx2ps' controls />\r\n            <div className=\"formDiv\">\r\n                <form onSubmit={this.handleSubmit}> \r\n                    <div>    \r\n                        <label>Deployment:</label>    \r\n                        <input type=\"text\" name=\"deployment\"\r\n                        value={this.state.deployment}    \r\n                        onChange={this.handleChange}        \r\n                        className={deploymentErr ? ' showError' : ''} \r\n                        placeholder={deploymentErr}\r\n                        />     \r\n                    </div>   \r\n\r\n                    <div>    \r\n                        <label>Node Id:</label>    \r\n                        <input type=\"text\" name=\"nodeid\"\r\n                        value={this.state.nodeid}    \r\n                        onChange={this.handleChange}        \r\n                        className={nodeidErr ? ' showError' : ''} \r\n                        placeholder={nodeidErr}/>   \r\n                    </div>   \r\n\r\n                    <div>    \r\n                        <label>Camera Id:</label>     \r\n                        <input type=\"text\" name=\"cameraid\"\r\n                        value={this.state.cameraid}    \r\n                        onChange={this.handleChange}        \r\n                        className={cameraidErr ? ' showError' : ''} \r\n                        placeholder={cameraidErr}\r\n                        />    \r\n                    </div>\r\n\r\n                    <div>    \r\n                        <label>Gateway Id:</label>     \r\n                        <input type=\"text\" name=\"gatewayid\"\r\n                        value={this.state.gatewayid}    \r\n                        onChange={this.handleChange}        \r\n                        className={gatewayidErr ? ' showError' : ''} \r\n                        placeholder={gatewayidErr}\r\n                        />    \r\n                    </div>   \r\n\r\n                    <div>    \r\n                        <label>Interface:</label>     \r\n                        <input type=\"text\" name=\"interfaceid\"\r\n                        value={this.state.interfaceid}    \r\n                        onChange={this.handleChange}        \r\n                        className={interfaceidErr ? ' showError' : ''} \r\n                        placeholder={interfaceidErr}\r\n                        />         \r\n                    </div>    \r\n{/*}\r\n                    <div>    \r\n                        <label>Sampling Timestamps:</label>     \r\n                        <input type=\"text\" name=\"samplingtp\"/>      \r\n                    </div>   \r\n\r\n                    <div>    \r\n                        <label>Update Timestamps:</label>     \r\n                        <input type=\"text\" name=\"updatetp\"/>      \r\n                    </div>   \r\n                        */}  \r\n\r\n                    <input type=\"submit\" value=\"Submit\" />    \r\n                </form>    \r\n            </div > \r\n        </div >   \r\n        )    \r\n    }    \r\n}    \r\n\r\nexport default Settings;","C:\\Users\\Socratis\\Desktop\\camera-app\\src\\Pages\\Home.js",[],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":1,"column":27,"nodeType":"34","messageId":"35","endLine":1,"endColumn":35},{"ruleId":"32","severity":1,"message":"36","line":1,"column":36,"nodeType":"34","messageId":"35","endLine":1,"endColumn":45},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]